After computing meson two-point functions in a [[QLUA Tutorial:Two-point meson functions| previous tutorial]], let us project them to a fixed momentum and save results in an AFF file.

We start with opening an AFF file for output:

 aw = qcd.aff.Writer("meson2pt.aff") 

Next, define a function to project to a given momentum and write the values of the 2-point function of a given meson to the file and to the output (It is nice to have some indication of the program running and doing useful things after all...)

 function meson2pt(qq_c, id, p3)
   local px = 2 * math.pi * p3[1] / L[0]
   local py = 2 * math.pi * p3[2] / L[1]
   local pz = 2 * math.pi * p3[3] / L[2]
   local w = (L:Real(L:pcoord(0)) * px +
              L:Real(L:pcoord(1)) * py +
              L:Real(L:pcoord(2)) * pz):expi()  -- plane wave with p=(px,py,pz)
   local pt2 = (qq_c * w):sum(L:MultiSet{d=3})  -- 2pt function for each time slice
   for i = 0, #pt2 - 1 do                       -- print 2pt values
     local q = pt2[i]
     printf("meson %d px %d py %d pz %d t %d %15.8e %15.8e\n",
             id, px, py, pz, i, q:real(), q:imag())
   end
   printf("\n")
   aw:write(string.format("/twopoint/meson%d/px%dpy%dpz%d", id, px, py, pz),
            pt2)  
 end

Here we construct the plane wave in <code>w</code> and use it to compute one component of the Fourier transform in spacial directions on each time slice. The multisets along the time direction is most handy here. The results are printed on the screen and saved into an AFF file. The organization of the file is a matter of taste, but uniformity is very helpful when one has to combine results of computing something on thousands of configurations.

Next, we are going to call <code>meson2pt()</code> for each of 16 mesons and each of a given 3-d moments

 moments = {{0,0,0},
            {1,0,0},
            {0,1,0},
            {1,0,1}}
 
 for i = 0, qcd.Ns * qcd.Ns - 1 do
   for m = 1, #moments do
     meson2pt(qq[i+1], i, moments[m])    
   end
 end


[[Category:Code]]
