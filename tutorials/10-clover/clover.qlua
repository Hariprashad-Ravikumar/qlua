require "stdlib"
require "gauge"

L = qcd.lattice{Lx, Lx, Lx, Lt}

volume = 1
for i = 0, qcd.Nd - 1 do
  volume = volume * L[i]
end

do
  local idx = L:Int(0)
  for d = 0, qcd.Nd - 1 do
    idx = idx * L[d] + L:pcoord(d)
  end
  S = L:RandomState(1984, idx)
end

U = { toSUn(L, rnd_f * S:gaussian_ColorMatrix()),
      toSUn(L, rnd_f * S:gaussian_ColorMatrix()),
      toSUn(L, rnd_f * S:gaussian_ColorMatrix()),
      toSUn(L, rnd_f * S:gaussian_ColorMatrix()) }

CL = qcd.Clover(U, kappa, c_sw, {1, 1, 1, -1}) -- antiperiodic only in T
mixed_solver = CL:mixed_solver(fp_eps, fp_iters, eps, max_iters)
full_solver = CL:solver(eps, max_iters)

F = S:gaussian_DiracFermion()

printf("mixed solver\n")
mG = mixed_solver(F)
printf("\n")
printf("full solver\n")
fG = full_solver(F)
printf("mixed/full difference: %.2e\n", (fG - mG):norm2() / mG:norm2())

printf("--------------------- end ---------------------- \n")