= QLUA serial arithmetics =

To deal with QCD codes, QLUA extends LUA numbers in several ways. Here we cover only serial data objects, for parallel objects, see the [[QLUA Tutorial:Lattice and fields|next tutorial]].

== Complex numbers==
One can use complex numbers in arithmetic operations. To create a complex number, say <code>6+7i</code>, one writes the following expression.

  complex(6,7)

Here is a sample of arithmetic operations:

  z = complex(3,4)
  y = z * complex(0,1) - 6 * math.sin(4 * math.pi / 12)
  printf("z= %g + %gi\n,y=%g = %gi\n", z:real(), z:imag(), y:real(), y:imag())
  printf("|z|=%g\n", z:abs())

In several contexts, QLUA expects a complex number. If you need to pass a real number instead, convert it to complex:

  x = 1.41123
  y = math.cos(1)
  foo(complex(x + y, 0))

==Clifford gamma matrices==
There is also a full Clifford algebra implementation. One can define a gamma matrix in two ways:
* The standard basis of γ<sub>0</sub>, γ<sub>1</sub>,γ<sub>2</sub>, and γ<sub>3</sub> is accessible as
 gamma{mu=0},gamma{mu=1},gamma{mu=2},gamma{mu=3}
* For convenience, γ<sub>5</sub> could also be addressed in this notation:
  P_plus = (1 + gamma{mu=5})/2
* In addition, one can use a binary notation for 16 basis matrices, e.g.,
  P_minus = (1 - gamma{n=15})/2

As you can see, one can do arithmetics with gamma matrices. Here is a more elaborate example:
  require "stdlib"
  P_plus = (1 + gamma{mu=5}) / 2
  P_minus = (1 - gamma{mu=5}) / 2
  printf("P+        = %s\n", tostring(P_plus))
  printf("P-        = %s\n", tostring(P_minus))
  printf("P+P-      = %s\n", tostring(P_plus * P_minus))
  printf("P+ + P-   = %s\n", tostring(P_plus + P_minus))
  printf("P+1 * P+  = %s\n", tostring(P_plus * (1 + gamma{mu=1})/ 2))

Though for now it appears just a curiosity, gamma matrices will become handy when we introduce lattice fields and start computing two and three point functions.

=Syntax notation remarks=
If you have looked on the LUA manuals, you may wonder what is the difference between <code>gamma{mu=(n+m)}</code> and <code>gamma({mu=(n+m)})</code>. There is none. In QLUA, <code>gamma</code> is a function what takes a table as an argument and return a gamma matrix object. If the table has a field called <code>mu</code>, the value of the field must be one of 0,1,2,3, or 5 for γ<sub>0</sub>, γ<sub>1</sub>,γ<sub>2</sub>,γ<sub>3</sub>, and γ<sub>5</sub> respectively. Otherwise. the table must contain a field called <code>n</code>, and its value must be between 0 and 15 inclusive.

QLUA uses this convention of passing a table with specially named fields to select different functionality when there is no natural choice otherwise.

[[Category:Code]]
