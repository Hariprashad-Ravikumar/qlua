require "stdlib"
require "gauge"
require "baryon"

-- setup lattice and compute its volume
L = qcd.lattice{Lx, Lx, Lx, Lt}
volume = 1
for i = 0, #L - 1 do
  volume = volume * L[i]
end

printf("kappa = %6.5f\n", kappa)

-- random state
do
  local x = L:Int(r.x)
  for i = 0, #L - 1 do
    x = x * L[i] + L:pcoord(i) * r.v[i + 1]
  end
  S = L:RandomState(r.f, x)
end

-- more or less random gauge field
U = {}
for i = 0, #L - 1 do
  U[i+1] = toSUn(L, 0.3 * S:gaussian_ColorMatrix())
end

-- compute and print plaquette
do 
 local p = 0
 local k = 0
 for i = 0, #L - 1 do
   for j = i + 1, #L - 1 do
     p = p + plaquette(U, i, j):trace():real():sum()
     k = k + volume * qcd.Nc
   end
 end
 printf("plaquette = %f\n", p / k)
end

-- construct the clover solver
CL = qcd.Clover(U, kappa, c_sw, bc)
solve = CL:mixed_solver(f_eps, f_iters, cl_eps, d_iters)

-- point source
src = L:DiracPropagator()
for ic = 0, qcd.Nc - 1 do
  for is = 0, qcd.Ns - 1 do
    local dv = L:DiracFermion()
    dv[{0,0,0,5,c=ic,d=is}] = complex(1,0)
    src[{c=ic,d=is}] = dv
  end
end

-- get the quark and antiquark propagators
q_prop = solve(src)


-- construct nucleon
bx = {{name="proton", qcd.proton3(q_prop, q_prop)},
      {name="antiproton", qcd.antiproton3(q_prop, q_prop)}}

-- write moment projections
aw = qcd.aff.Writer("nucleon2pt.aff") 

function baryon2pt(qq_c, id, p3)
  local px = 2 * math.pi * p3[1] / L[0]
  local py = 2 * math.pi * p3[2] / L[1]
  local pz = 2 * math.pi * p3[3] / L[2]
  local w = (L:Real(L:pcoord(0)) * px +
             L:Real(L:pcoord(1)) * py +
             L:Real(L:pcoord(2)) * pz):expi()  -- plane wave with p=(px,py,pz)
  local pt2 = (qq_c * w):sum(L:MultiSet{d=3})  -- 2pt function for each time slice
  for i = 0, #pt2 - 1 do                       -- print 2pt values
    local q = pt2[i]
    printf("%s px %d py %d pz %d t %d %15.8e %15.8e\n",
            id, p3[1], p3[2], p3[3], i, q:real(), q:imag())
  end
  printf("\n")
  aw:write(string.format("/twopoint/%s/px%dpy%dpz%d",
                          id, p3[1], p3[2], p3[3]),
           pt2)  
end

--for m = 1, #moments do
--  baryon2pt(qqq, "proton3", moments[m])    
--end
for b = 1, #bx do
   baryon2pt(bx[b][1], bx[b].name, {0,0,0})
end


-- end
printf("done\n")