Given the machinery developed for mesons, constructing nucleon 2-point function is easy. QLUA provides a useful primitive for computing the diquark
D<sup>fμ</sup><sub>gν</sub>=Q1<sup>aα</sup><sub>bμ</sub>Q2<sup>cα</sup><sub>dν</sub>ε<sub>acf</sub>ε<sup>bdg</sup>
  D = qcd.quarkContract13(Q1, Q2)
does the trick. Its name is derived from Croma's counterpart; it turns out to be
useful both for 2pt functions and sequential source construction.
Given this helper, we can define the nucleon 2-pt as
 function qcd.proton3(d, u)
   local S =  gamma{mu=0} * gamma{mu=2} * (1 + gamma{mu=3}) / 2
   local T =  (1 - gamma{mu=0}*gamma{mu=1}*complex(0,1)) * (1 + gamma{mu=3}) / 2
   local a2 = T * u
   local a3 = qcd.quarkContract13(d * S, S * u)
   return (a2:spintrace() * a3:spintrace() + (a2 * a3):spintrace()):trace()
 end
Again, naming conventions follow Chroma's. This function is defined in file <code>baryon.qlua</code> which is shipped as part of the standard installation.

With these helpers, the nucleon 2pt calculations becomes trivial:
 require "baryon"
 ...
 q_prop = solve(src)
 qqq = qcd.proton3(q_prop, q_prop)
The rest is very much like the meson case.
[[Category:Code]]
