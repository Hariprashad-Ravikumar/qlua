As an example of real QCD calculations, let us compute two-point functions for all light-light mesons.

We start with the usual steps.
 require "stdlib"
 require "gauge"
 L = qcd.lattice{8,8,8,16}
 volume = 1
 for i = 0, #L - 1 do
   volume = volume * L[i]
 end

Initialize the random state from the system source.

 r = { } 
 do
   r.x = os.random()
   local x = L:Int(r.x)
   for i = 0, #L - 1 do
     r[i+1] = os.random()
     x = x * L[i] + L:pcoord(i) * r[i+1]
   end
   r.f = os.random()
   S = L:RandomState(r.f, x)
 end

If we ever need to rerun this code, here are the random numbers used:

 printf("r.x  = %12d\n", r.x)
 printf("r.f  = %12d\n", r.f)
 for i = 0, #L - 1 do
   printf("r[%d] = %12d\n", i, r[i+1])
 end

More or less random gauge field is next

 U = {}
 for i = 0, #L - 1 do
   U[i+1] = toSUn(L, 0.3 * S:gaussian_ColorMatrix())
 end

Let us print the plaquette to see how random the gauge field really is. We use the standard plaquette code from <code>"gauge"</code>

 do 
  local p = 0
  local k = 0
  for i = 0, #L - 1 do
    for j = i + 1, #L - 1 do
      p = p + plaquette(U, i, j):trace():real():sum()
      k = k + volume * qcd.Nc
    end
  end
  printf("plaqutte = %f\n", p / k)
 end

Next, construct the clover object and make the mixed solver out of it. 

 CL = qcd.Clover(U, 0.139727, 1.0, {1,1,1, -1})
 solve = CL:mixed_solver(1e-25, 300, 2000)

Build the 4-component point source at the origin

 src = L:DiracPropagator()
 for ic = 0, qcd.Nc - 1 do
   for is = 0, qcd.Ns - 1 do
     local dv = L:DiracFermion()
     dv[{0,0,0,0,c=ic,d=is}] = complex(1,0)
     src[{c=ic,d=is}] = dv
   end
 end

Find the quark propagator for this source and make the antiquark propagator out of the quark.

 q_prop = solve(src)
 a_prop = gamma{mu=5} * q_prop:conj() * gamma{mu=5}
 
Collect the mesons in <code>qq</code>

 qq = {}
 for i = 0, qcd.Ns * qcd.Ns - 1 do
   qq[i+1] = qcd.dot(a_prop, gamma{n=i} * q_prop * gamma{n=i})
 end

At this point we have 16 complex fields for each of 16 mesons. We are going to extract momentum projected two point functions from them in the [[QLUA Tutorial:Momentum projection|tutorial on momentum projection]].

[[Category:Code]]
