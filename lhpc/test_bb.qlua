require "stdlib"
require "gauge"
require "wuppertal-smear"
require "ape-smear"
require "hex-smear"

Lx=4
Lt=8
L = qcd.lattice{Lx,Lx,Lx,Lt}
volume = Lx * Lx * Lx * Lt

tsrc = 5
csrc = {1,2,3,tsrc}
baryon='proton_3'
flavor='D'

time_reverse = nil
if (baryon =='proton_3') then time_reverse = false
elseif (baryon == 'proton_negpar_3') then time_reverse = true
else exit() end

--src_snk_dt = 4
--if (not time_reverse) then tsnk = (tsrc + src_snk_dt) % Lt
--else tsnk = (tsrc + lt - src_snk_dt) % Lt end
tsnk = 1

bc = {1,1,1,-1}
t_axis = 3

psnk = {1,2,3,-10} -- psnk_t is not used

-- for hadspec
psnk_list = {
  { 0, 0, 0, 0}, 
  { 0, 0, 1, 0}, { 0, 1, 0, 0}, { 1, 0, 0, 0},
  { 0, 0,-1, 0}, { 0,-1, 0, 0}, {-1, 0, 0, 0},

  { 0, 1, 1, 0}, { 1, 1, 0, 0}, { 1, 0, 1, 0},
  { 0, 1,-1, 0}, { 1,-1, 0, 0}, { 1, 0,-1, 0},
  { 0,-1, 1, 0}, {-1, 1, 0, 0}, {-1, 0, 1, 0},
  { 0,-1,-1, 0}, {-1,-1, 0, 0}, {-1, 0,-1, 0}
}

-- list of momenta for insertsions
qext_list = {
  { 0, 0, 0, 0}, 
  { 0, 0, 1, 0}, { 0, 1, 0, 0}, { 1, 0, 0, 0},
  { 0, 0,-1, 0}, { 0,-1, 0, 0}, {-1, 0, 0, 0},

  { 0, 1, 1, 0}, { 1, 1, 0, 0}, { 1, 0, 1, 0},
  { 0, 1,-1, 0}, { 1,-1, 0, 0}, { 1, 0,-1, 0},
  { 0,-1, 1, 0}, {-1, 1, 0, 0}, {-1, 0, 1, 0},
  { 0,-1,-1, 0}, {-1,-1, 0, 0}, {-1, 0,-1, 0}
}

kappa     = .12805081056163085512
c_sw      = 1
epsilon   = 1e-21
max_iters = 20000

wup_alpha = 3.0
wup_N = 25

function make_source(Z, csrc)
  local F=L:DiracPropagator()
  for c = 0, qcd.Nc - 1 do
    for d = 0, qcd.Ns - 1 do
      local dv = L:DiracFermion()
      dv[{csrc[1], csrc[2], csrc[3], csrc[4],c=c,d=d}] = complex(1,0)
      F[{c=c,d=d}] = dv
    end
  end
  L:Subset{axis=3, position=csrc[4]}:where(
     function()
       F:set(wuppertal_smear(Z, wup_alpha, wup_N, F, 3))
     end)
  return F
end

U, hdr = qcd.nersc.read_gauge('input/gauge_disord_4c8.NERSC')
-------- XXX vvvv testing code
--  local function copy_table(tab) 
--    local a = {}; for i,v in pairs(tab) do a[i] = v end
--    return a
--  end
--local U_bc = copy_table(U)
--U_bc[1+t_axis] = L:ColorMatrix(U[1+t_axis])
--L:Subset{axis=t_axis, position=L[t_axis]-1}:where(
--  function()
--    U_bc[1+t_axis]:set(U_bc[1+t_axis] * (-1))
--  end
--  )
--U = U_bc
--bc = { 1, 1, 1, 1 }
-------- XXX ^^^^ testing code

-- compute forward propagagor
S = make_source(U, csrc)
solver = qcd.Clover(U, kappa, c_sw, bc):solver(epsilon, max_iters)
fwd_prop = 2 * kappa * solver(S)
fwd_prop_sm = wuppertal_smear(U, wup_alpha, wup_N, fwd_prop, 3)
qcd.ddpairs.write("D", 
                  string.format('output.qlua/forward_x%dy%dz%dt%d.dd', 
                                csrc[1],csrc[2],csrc[3],csrc[4]),
                  "", S, "", tsrc, fwd_prop, "")
-- compute hadspec
aff_hadspec = qcd.aff.Writer(
                  string.format('output.qlua/hadspec_x%dy%dz%dt%d.aff',
                                csrc[1],csrc[2],csrc[3],csrc[4]))
--save_hadspec(L, aff_hadspec, "/hspectrum/GN25-P/mq-0.0953",
--             fwd_prop, fwd_prop, csrc, psnk_list, 3, bc[4])
--save_hadspec(L, aff_hadspec, "/hspectrum/GN25-GN25/mq-0.0953",
--             fwd_prop_sm, fwd_prop_sm, csrc, psnk_list, 3, bc[4])

-- compute seqsource and backward prop
bc_2pt_t = bc[1+t_axis]*bc[1+t_axis]*bc[1+t_axis]
seqsource = baryon_seqsource(L, baryon, flavor, fwd_prop_sm, fwd_prop_sm, 
                             csrc, tsnk, psnk, 3, bc_2pt_t)
seqsource_sm = wuppertal_smear(U, wup_alpha, wup_N, seqsource, 3)
qcd.ddpairs.write("D",
                  string.format('output.qlua/seqsrc_%s_%s_x%dy%dz%dt%d_PX%dPY%dPZ%dT%d.dd',
                                baryon, flavor,
                                csrc[1],csrc[2],csrc[3],csrc[4],
                                psnk[1],psnk[2],psnk[3], tsnk),
                  "", L:DiracPropagator(seqsource_sm), "", tsrc, seqsource_sm, "")
bwd_prop = 2 * kappa * solver(seqsource_sm)
qcd.ddpairs.write("D",
                  string.format('output.qlua/backward_%s_%s_x%dy%dz%dt%d_PX%dPY%dPZ%dT%d.dd',
                                baryon, flavor,
                                csrc[1],csrc[2],csrc[3],csrc[4],
                                psnk[1],psnk[2],psnk[3], tsnk),
                  "", seqsource_sm, "", tsrc, bwd_prop, "")
-- compute building blocks
aff_bb = qcd.aff.Writer(
            string.format('output.qlua/bb_%s_%s_x%dy%dz%dt%d_PX%dPY%dPZ%dT%d.aff',
                          baryon, flavor,
                          csrc[1],csrc[2],csrc[3],csrc[4],
                          psnk[1], psnk[2], psnk[3], tsnk))

calc_bb(L, 
        aff_bb, 
        string.format('/bb/%s/%s', baryon, flavor), -- destination
        2, -- max links
        fwd_prop, bwd_prop, U, --fields
        csrc, tsnk, psnk, t_axis,
        qext_list,
        time_reverse,
        bc[1+t_axis], bc_2pt_t)
